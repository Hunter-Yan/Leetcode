def uniquePathsWithObstacles(obstacleGrid):
    if not obstacleGrid:
        return 0
    m, n = len(obstacleGrid), len(obstacleGrid[0])
    a = 0
    while a < n and obstacleGrid[0][a] == 0:
        a += 1
    for k in range(a, n):
        obstacleGrid[0][k] = 1
    b = 0
    while b < m and obstacleGrid[b][0] == 0:
        b += 1
    for k in range(b, m):
        obstacleGrid[k][0] = 1
    for i in range(0, m):
        for j in range(0, n):
            obstacleGrid[i][j] = 1 - obstacleGrid[i][j]
    for i in range(1, m):
        for j in range(1, n):
            if obstacleGrid[i][j]:
                obstacleGrid[i][j] = obstacleGrid[i][j - 1] + obstacleGrid[i - 1][j]
    return obstacleGrid[-1][-1]

obstacleGrid=[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
print(uniquePathsWithObstacles(obstacleGrid))
